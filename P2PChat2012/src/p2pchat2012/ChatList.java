/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package p2pchat2012;

import LogInServer.Client;
import LogInServer.GetListHandler;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author D Thanh
 */
public class ChatList extends javax.swing.JFrame {
    public int MAXUSER=4;
    public Client[] list=new Client[MAXUSER];
    public String[] listClient=new String[MAXUSER];
    private Socket s;
    public Manager m;
    public boolean connect=false;
    /**
     * Creates new form ChatList
     */
    public ChatList(Manager x) {
        m=x;
        initComponents();
    }
    public ChatList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        IP_ser = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Port_ser = new javax.swing.JTextField();
        Con = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        List1 = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                disconect(evt);
            }
        });

        jLabel1.setText("Server IP:");

        IP_ser.setText("127.0.0.1");
        IP_ser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IP_serActionPerformed(evt);
            }
        });

        jLabel2.setText("Port:");

        Port_ser.setText("1554");

        Con.setText("Conect");
        Con.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "List Chat"));

        List1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {""};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        List1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                List1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(List1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IP_ser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Port_ser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Con)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(IP_ser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(Port_ser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Con))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void IP_serActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IP_serActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IP_serActionPerformed

    private void ConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConActionPerformed
        // TODO add your handling code here:
        boolean flag=false;
        if (IP_ser.getText().equals("")){ 
            JOptionPane.showMessageDialog(rootPane, "Please fill out IP server!", "Error", JOptionPane.ERROR_MESSAGE);
            flag=true;
        }
        if (Port_ser.getText().equals("")){
            JOptionPane.showMessageDialog(rootPane, "Please fill out port server!", "Error", JOptionPane.ERROR_MESSAGE);
            flag=true;
        }
        if (!flag){
            try {
                s=new Socket(IP_ser.getText(), Integer.parseInt(Port_ser.getText()));
                GetListHandler GL=new GetListHandler(s,this,m.Name);
                GL.start();
                Con.setEnabled(false);
                connect=true;
                this.setTitle(m.Name+"'s connecting with server "+IP_ser.getText()+" Port: "+Port_ser.getText());
                m.writeLog("Log in to server "+IP_ser.getText()+" Port: "+Port_ser.getText());
            } catch (UnknownHostException ex) {
                Logger.getLogger(ChatList.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Server not available", "Error", JOptionPane.ERROR_MESSAGE);
                m.writeLog("Can not log in to server "+IP_ser.getText()+" Port: "+Port_ser.getText());
            } catch (IOException ex) {
                Logger.getLogger(ChatList.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "This port is incorrect!", "Error", JOptionPane.ERROR_MESSAGE);
                m.writeLog("Can not log in to server "+IP_ser.getText()+" Port: "+Port_ser.getText());
            }
        }
    }//GEN-LAST:event_ConActionPerformed

    private void disconect(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_disconect
        if (connect==false) this.dispose();
        else {
            try {
                // TODO add your handling code here:
                connect=false;
                DataOutputStream outToServer= new DataOutputStream(s.getOutputStream());
                outToServer.writeBytes("</disconect>"+"\n");
                m.writeLog("Disconnect to server "+IP_ser.getText()+" Port "+Port_ser.getText());
                s.close();
            } catch (IOException ex) {
                Logger.getLogger(ChatList.class.getName()).log(Level.SEVERE, null, ex);
                //this.dispose();
            }
        }
    }//GEN-LAST:event_disconect
    
    private void List1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_List1MouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount()==2){
            ConversationClient Cwin=new ConversationClient(list[List1.getSelectedIndex()].getPort(),m.Name,list[List1.getSelectedIndex()].getIP(),m);
            Cwin.setVisible(true);
        }
    }//GEN-LAST:event_List1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ChatList().setVisible(true);
            }
        });
    }
    public void displayList(){
        for (int i=0;i<MAXUSER;i++){
            if (list[i]!=null){
                listClient[i]=list[i].getName()+" | "+list[i].getIP()+" | "+list[i].getPort();
            }
            else listClient[i]="";
        }
        List1.setListData(listClient);
    }
    public void errorFull(){
        JOptionPane.showMessageDialog(rootPane, "Server is full! You cannot log in to this server", "Error", JOptionPane.ERROR_MESSAGE);
        m.writeLog("Server "+IP_ser.getText()+" Port "+Port_ser.getText()+" is full");
        this.dispose();
    }
    public void errorDis(){
        JOptionPane.showMessageDialog(rootPane, "Server is not available", "Error", JOptionPane.ERROR_MESSAGE);
        m.writeLog("Server "+IP_ser.getText()+" Port "+Port_ser.getText()+" is not available");
        this.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Con;
    private javax.swing.JTextField IP_ser;
    private javax.swing.JList List1;
    private javax.swing.JTextField Port_ser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
